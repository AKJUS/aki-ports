From a5cb2d14944dbc847a3cd405cb34a7bd6865e7d6 Mon Sep 17 00:00:00 2001
From: John Hood <cgull@glup.org>
Date: Mon, 26 Oct 2020 13:20:57 -0400
Subject: [PATCH] Fix hang with pkg scripts that start daemons.

Rewrite core wait loop to consume all immediately available output,
and handle non-LF-terminated output.

Break wait loop out to separate function.  Use it in
pkg_script_run_lua() too to eliminate copypasta.

Fix some error handling in pkg_script_run().
---
 libpkg/lua_scripts.c |  68 +-----------------
 libpkg/private/pkg.h |   1 +
 libpkg/scripts.c     | 159 ++++++++++++++++++++++---------------------
 3 files changed, 84 insertions(+), 144 deletions(-)

diff --git libpkg/lua_scripts.c libpkg/lua_scripts.c
index 3d52c2dd..8e11ffa3 100644
--- libpkg/lua_scripts.c
+++ libpkg/lua_scripts.c
@@ -426,12 +426,8 @@ pkg_lua_script_run(struct pkg * const pkg, pkg_lua_script type, bool upgrade)
 	struct procctl_reaper_status info;
 	struct procctl_reaper_kill killemall;
 #endif
-	struct pollfd pfd;
 	int cur_pipe[2];
-	bool should_waitpid;
 	char *line = NULL;
-	FILE *f;
-	ssize_t linecap = 0;
 
 	if (pkg->lua_scripts[type] == NULL)
 		return (EPKG_OK);
@@ -503,68 +499,8 @@ pkg_lua_script_run(struct pkg * const pkg, pkg_lua_script type, bool upgrade)
 		}
 
 		close(cur_pipe[1]);
-		memset(&pfd, 0, sizeof(pfd));
-		pfd.fd = cur_pipe[0];
-		pfd.events = POLLIN | POLLERR | POLLHUP;
-
-		f = fdopen(pfd.fd, "r");
-		should_waitpid = true;
-		for (;;) {
-			errno = 0;
-			int pres = poll(&pfd, 1, 1000);
-			if (pres == -1) {
-				if (errno == EINTR) {
-					continue;
-				} else {
-					pkg_emit_error("poll() failed: %s",
-					    strerror(errno));
-					ret = EPKG_FATAL;
-					goto cleanup;
-				}
-			}
-			if (pres == 0) {
-				pid_t p;
-				assert(should_waitpid);
-				while ((p = waitpid(pid, &pstat, WNOHANG)) == -1) {
-					if (errno != EINTR) {
-						pkg_emit_error("waitpid() "
-						    "failed: %s", strerror(errno));
-						ret = EPKG_FATAL;
-						goto cleanup;
-					}
-				}
-				if (p > 0) {
-					should_waitpid = false;
-					break;
-				}
-				continue;
-			}
-			if (pfd.revents & (POLLERR|POLLHUP))
-				break;
-			if (getline(&line, &linecap, f) > 0)
-				pkg_emit_message(line);
-			if (feof(f))
-				break;
-		}
-		/* Gather any remaining output */
-		while (!feof(f) && !ferror(f) && getline(&line, &linecap, f) > 0) {
-			pkg_emit_message(line);
-		}
-		fclose(f);
-
-		while (should_waitpid && waitpid(pid, &pstat, 0) == -1) {
-			if (errno != EINTR) {
-				pkg_emit_error("waitpid() failed: %s",
-				    strerror(errno));
-				ret = EPKG_FATAL;
-				goto cleanup;
-			}
-		}
-		if (WEXITSTATUS(pstat) != 0) {
-			pkg_emit_error("lua script failed");
-			ret = EPKG_FATAL;
-			goto cleanup;
-		}
+
+		ret = pkg_script_run_child(pid, &pstat, cur_pipe[0], "lua");
 	}
 
 
diff --git libpkg/private/pkg.h libpkg/private/pkg.h
index f7a2d9da..2075b4e9 100644
--- libpkg/private/pkg.h
+++ libpkg/private/pkg.h
@@ -728,6 +728,7 @@ int pkg_start_stop_rc_scripts(struct pkg *, pkg_rc_attr attr);
 int pkg_script_run(struct pkg *, pkg_script type, bool upgrade);
 int pkg_lua_script_run(struct pkg *, pkg_lua_script type, bool upgrade);
 ucl_object_t *pkg_lua_script_to_ucl(struct pkg_lua_script *);
+int pkg_script_run_child(int pid, int *pstat, int inputfd, const char* script_name);
 
 int pkg_open2(struct pkg **p, struct archive **a, struct archive_entry **ae,
 	      const char *path, struct pkg_manifest_key *keys, int flags, int fd);
diff --git libpkg/scripts.c libpkg/scripts.c
index 88ab669a..aaf8ab48 100644
--- libpkg/scripts.c
+++ libpkg/scripts.c
@@ -69,19 +69,13 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 	ssize_t bytes_written;
 	size_t script_cmd_len;
 	long argmax;
-	int cur_pipe[2];
+	int cur_pipe[2] = {-1, -1};
 #ifdef PROC_REAP_KILL_XXX
 	bool do_reap;
 	pid_t mypid;
 	struct procctl_reaper_status info;
 	struct procctl_reaper_kill killemall;
 #endif
-	struct pollfd pfd;
-	bool should_waitpid;
-	ssize_t linecap = 0;
-	char *line = NULL;
-	FILE *f;
-
 	struct {
 		const char * const arg;
 		const pkg_script b;
@@ -155,6 +149,11 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 				goto cleanup;
 			}
 
+			if (fcntl(cur_pipe[0], F_SETFL, O_NONBLOCK) == -1) {
+				pkg_emit_errno("pkg_script_run", "fcntl");
+				goto cleanup;
+			}
+
 			setenv("PKG_MSGFD", "4", 1);
 
 			posix_spawn_file_actions_adddup2(&action, cur_pipe[1], 4);
@@ -171,8 +170,6 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 				if (pipe(stdin_pipe) < 0) {
 					ret = EPKG_FATAL;
 					posix_spawn_file_actions_destroy(&action);
-					close(cur_pipe[0]);
-					close(cur_pipe[1]);
 					goto cleanup;
 				}
 
@@ -191,8 +188,6 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 					pkg_errno("Cannot open %s", "/dev/null");
 					ret = EPKG_FATAL;
 					posix_spawn_file_actions_destroy(&action);
-					close(cur_pipe[0]);
-					close(cur_pipe[1]);
 					goto cleanup;
 				}
 				posix_spawn_file_actions_adddup2(&action,
@@ -212,8 +207,6 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 				errno = error;
 				pkg_errno("Cannot runscript %s", map[i].arg);
 				posix_spawn_file_actions_destroy(&action);
-				close(cur_pipe[0]);
-				close(cur_pipe[1]);
 				goto cleanup;
 			}
 			posix_spawn_file_actions_destroy(&action);
@@ -240,83 +233,26 @@ pkg_script_run(struct pkg * const pkg, pkg_script type, bool upgrade)
 			unsetenv("PKG_PREFIX");
 
 			close(cur_pipe[1]);
-			memset(&pfd, 0, sizeof(pfd));
-			pfd.fd = cur_pipe[0];
-			pfd.events = POLLIN | POLLERR | POLLHUP;
-
-			f = fdopen(pfd.fd, "r");
-			should_waitpid = true;
-			for (;;) {
-				errno = 0;
-				int pres = poll(&pfd, 1, 1000);
-				if (pres == -1) {
-					if (errno == EINTR) {
-						continue;
-					} else {
-						pkg_emit_error("poll() "
-						    "failed: %s", strerror(errno));
-						ret = EPKG_FATAL;
-						goto cleanup;
-					}
-				}
-				if (pres == 0) {
-					pid_t p;
-					assert(should_waitpid);
-					while ((p = waitpid(pid, &pstat, WNOHANG)) == -1) {
-						if (errno != EINTR) {
-							pkg_emit_error("waitpid() "
-							    "failed: %s", strerror(errno));
-							ret = EPKG_FATAL;
-							goto cleanup;
-						}
-					}
-					if (p > 0) {
-						should_waitpid = false;
-						break;
-					}
-					continue;
-				}
-				if (pfd.revents & (POLLERR|POLLHUP))
-					break;
-				if (getline(&line, &linecap, f) > 0)
-					pkg_emit_message(line);
-				if (feof(f))
-					break;
-			}
-			/* Gather any remaining output */
-			while (!feof(f) && !ferror(f) && getline(&line, &linecap, f) > 0) {
-				pkg_emit_message(line);
-			}
-			fclose(f);
-
-			while (should_waitpid && waitpid(pid, &pstat, 0) == -1) {
-				if (errno != EINTR) {
-					pkg_emit_error("waitpid() failed: %s",
-					    strerror(errno));
-					ret = EPKG_FATAL;
-					goto cleanup;
-				}
-			}
+			cur_pipe[1] = -1;
 
-			if (WEXITSTATUS(pstat) != 0) {
-				if (WEXITSTATUS(pstat) == 3)
-					exit(0);
+			ret = pkg_script_run_child(pid, &pstat, cur_pipe[0], map[i].arg);
 
-				pkg_emit_error("%s script failed", map[i].arg);
-				ret = EPKG_FATAL;
-				goto cleanup;
-			}
+			close(cur_pipe[0]);
+			cur_pipe[0] = -1;
 		}
 	}
 
 cleanup:
 
-	free(line);
 	utstring_free(script_cmd);
 	if (stdin_pipe[0] != -1)
 		close(stdin_pipe[0]);
 	if (stdin_pipe[1] != -1)
 		close(stdin_pipe[1]);
+	if (cur_pipe[0] != -1)
+		close(cur_pipe[0]);
+	if (cur_pipe[1] != -1)
+		close(cur_pipe[1]);
 
 #ifdef PROC_REAP_KILL_XXX
 	/*
@@ -340,3 +276,70 @@ cleanup:
 	return (ret);
 }
 
+
+int pkg_script_run_child(int pid, int *pstat, int inputfd, const char* script_name) {
+	struct pollfd pfd;
+	bool wait_for_child;
+	char msgbuf[16384+1];
+
+
+	memset(&pfd, 0, sizeof(pfd));
+	pfd.events = POLLIN | POLLERR | POLLHUP;
+	pfd.fd = inputfd;
+
+
+	// Wait for child to exit, and read input, including all queued input on child exit.
+	wait_for_child = true;
+	do {
+		pfd.revents = 0;
+		errno = 0;
+		// Check if child is running, get exitstatus if newly terminated.
+		pid_t p = 0;
+		while (wait_for_child && (p = waitpid(pid, pstat, WNOHANG)) == -1) {
+			if (errno != EINTR) {
+				pkg_emit_error("waitpid() "
+					       "failed: %s", strerror(errno));
+				return EPKG_FATAL;
+			}
+		}
+		if (p > 0) {
+			wait_for_child = false;
+		}
+		// Check for input from child, but only wait for more if child is still running.
+		// Read/print all available input.
+		ssize_t readsize;
+		do {
+			readsize = 0;
+			int pres;
+			while ((pres = poll(&pfd, 1, wait_for_child ? 1000 : 0)) == -1) {
+				if (errno != EINTR) {
+					pkg_emit_error("poll() "
+						       "failed: %s", strerror(errno));
+					return EPKG_FATAL;
+				}
+			}
+			if (pres > 0 && pfd.revents & POLLIN) {
+				while ((readsize = read(inputfd, msgbuf, sizeof msgbuf - 1)) < 0) {
+					if (errno != EINTR && errno != EAGAIN) {
+						pkg_emit_error("read() "
+							       "failed: %s", strerror(errno));
+						return EPKG_FATAL;
+					}
+				}
+				if (readsize > 0) {
+					msgbuf[readsize] = '\0';
+					pkg_emit_message(msgbuf);
+				}
+			}
+		} while (readsize > 0);
+	} while (wait_for_child);
+
+	if (WEXITSTATUS(*pstat) != 0) {
+		if (WEXITSTATUS(*pstat) == 3)
+			exit(0);
+
+		pkg_emit_error("%s script failed", script_name);
+		/* return EPKG_FATAL; */
+	}
+	return EPKG_OK;
+}
-- 
2.21.0 (Apple Git-122)

